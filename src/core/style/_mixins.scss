// Prefix a given property for the given prefixes set.
// For example:
// @include prefix('transform', 'translate3d(0,0,0)', $transform-vendor-prefixes);
@mixin prefix($prop, $val, $prefixes) {
  @each $p in $prefixes {
    -#{$p}-#{$prop}: $val;
  }
}

@mixin transform-origin($x, $y) {
  -webkit-transform-origin: $x $y;
  transform-origin: $x $y;
}
@mixin transform-translate3d($x, $y, $z) {
  -webkit-transform: translate3d($x, $y, $z);
  transform: translate3d($x, $y, $z);
}
@mixin transform-translate3d-scale($x, $y, $z, $scale) {
  -webkit-transform: translate3d($x, $y, $z) scale($scale);
  transform: translate3d($x, $y, $z) scale($scale);
}

@mixin transform-scale($val) {
  -webkit-transform: scale($val);
  transform: scale($val);
}

@mixin transform-rotate($val) {
  -webkit-transform: rotate($val);
  transform: rotate($val);
}

@mixin transform($val) {
  -webkit-transform: $val;
  transform: $val;
}

@mixin transition($val) {
  -webkit-transition: $val;
  transition: $val;
}

@mixin transition-timing($val) {
  -webkit-transition-timing-function: $val;
  transition-timing-function: $val;

}

@mixin transition-transform() {
  -webkit-transition-property: -webkit-transform;
  transition-property: transform;
}

@mixin easeInOut($duration, $curve) {
  -webkit-transition: all $duration $curve;
  transition: all $duration $curve;

  -webkit-transition-timing-function: all $duration $curve;
  transition-timing-function: all $duration $curve;
}

@mixin transition-delay($val) {
  -webkit-transition-delay: $val;
  transition-delay: $val;
}

@mixin animation($val) {
  -webkit-animation: $val;
  animation: $val;
}

@mixin user-select($val:none) {
  -webkit-user-select: $val;
  -moz-user-select: $val;
  -ms-user-select: $val;
  user-select: $val;
}

@mixin keyframes($name) {
  @-webkit-keyframes #{$name} {
    @content;
  }
  @keyframes #{$name} {
    @content;
  }
}

@mixin margin-selectors($before:1em, $after:1em, $start:0px, $end:0px) {
  -webkit-margin-before: $before;
  -webkit-margin-after: $after;
  -webkit-margin-start: $start;
  -webkit-margin-end: $end;
}


// Flexbox
// --------------------------------

@mixin flex-display {
  display: -webkit-box;
  display: -webkit-flex;
  display: -moz-box;
  display: -moz-flex;
  display: -ms-flexbox;
  display: flex;
}

@mixin flex-dislay-inline {
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -moz-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
}

@mixin flex-direction($value: row) {
  @if $value == row-reverse {
    -webkit-box-direction: reverse;
    -webkit-box-orient: horizontal;
  } @else if $value == column {
    -webkit-box-direction: normal;
    -webkit-box-orient: vertical;
  } @else if $value == column-reverse {
    -webkit-box-direction: reverse;
    -webkit-box-orient: vertical;
  } @else {
    -webkit-box-direction: normal;
    -webkit-box-orient: horizontal;
  }
  -webkit-flex-direction: $value;
  -moz-flex-direction: $value;
  -ms-flex-direction: $value;
  flex-direction: $value;
}

@mixin flex-wrap($value: nowrap) {
  // No Webkit Box fallback.
  -webkit-flex-wrap: $value;
  -moz-flex-wrap: $value;
  @if $value == nowrap {
    -ms-flex-wrap: none;
  } @else {
    -ms-flex-wrap: $value;
  }
  flex-wrap: $value;
}

@mixin flex($grow: 1, $shrink: null, $basis: null) {
  -webkit-box-flex: $grow;
  -webkit-flex: $grow $shrink $basis;
  -moz-box-flex: $grow;
  -moz-flex: $grow $shrink $basis;
  -ms-flex: $grow $shrink $basis;
  flex: $grow $shrink $basis;
}

@mixin flex-flow($values: (row nowrap)) {
  // No Webkit Box fallback.
  -webkit-flex-flow: $values;
  -moz-flex-flow: $values;
  -ms-flex-flow: $values;
  flex-flow: $values;
}

@mixin flex-order($n) {
  -webkit-order: $n;
  -ms-flex-order: $n;
  order: $n;
}

@mixin flex-align-items($value: stretch) {
  @if $value == flex-start {
    -webkit-box-align: start;
    -ms-flex-align: start;
  } @else if $value == flex-end {
    -webkit-box-align: end;
    -ms-flex-align: end;
  } @else {
    -webkit-box-align: $value;
    -ms-flex-align: $value;
  }
  -webkit-align-items: $value;
  -moz-align-items: $value;
  align-items: $value;
}

@mixin flex-align-self($value: auto) {
  -webkit-align-self: $value;
  -moz-align-self: $value;
  @if $value == flex-start {
    -ms-flex-item-align: start;
  } @else if $value == flex-end {
    -ms-flex-item-align: end;
  } @else {
    -ms-flex-item-align: $value;
  }
  align-self: $value;
}

@mixin flex-align-content($value: stretch) {
  -webkit-align-content: $value;
  -moz-align-content: $value;
  @if $value == flex-start {
    -ms-flex-line-pack: start;
  } @else if $value == flex-end {
    -ms-flex-line-pack: end;
  } @else {
    -ms-flex-line-pack: $value;
  }
  align-content: $value;
}

@mixin flex-justify-content($value: stretch) {
  @if $value == flex-start {
    -webkit-box-pack: start;
    -ms-flex-pack: start;
  } @else if $value == flex-end {
    -webkit-box-pack: end;
    -ms-flex-pack: end;
  } @else if $value == space-between {
    -webkit-box-pack: justify;
    -ms-flex-pack: justify;
  } @else {
    -webkit-box-pack: $value;
    -ms-flex-pack: $value;
  }
  -webkit-justify-content: $value;
  -moz-justify-content: $value;
  justify-content: $value;
}


@mixin calc($property, $expression) {
  #{$property}: -webkit-calc(#{$expression});
  #{$property}: calc(#{$expression});
}

@mixin input-placeholder($color) {
  &:-ms-input-placeholder {
    color: $color;
  }
  &::-webkit-input-placeholder {
    color: $color;
  }
}

@mixin box-sizing($boxmodel) {
  -webkit-box-sizing: $boxmodel;
  -moz-box-sizing: $boxmodel;
  box-sizing: $boxmodel;
}


@mixin not-selectable($value:none) {
  -webkit-touch-callout: $value;
  -webkit-user-select: $value;
  -khtml-user-select: $value;
  -moz-user-select: $value;
  -ms-user-select: $value;
  user-select: $value;
}



// ******************************
// Mixins: Text Fields
// ******************************

@mixin text-field($color, $borderColor, $transition:false, $borderWidth:1px ) {
  input, textarea {
    color: $color;
    border-color: $borderColor;
    border-bottom-width: $borderWidth;

    @if( $transition != false ) {
      @include transition($transition);
    }
  }
}

@mixin text-hint($color, $size:large, $transition:false ) {
  label {
    color: $color;

    @if $size == "small" {

      @include transform-translate3d-scale(0, $tff-hint-offset-small, 0, $ttf-hint-offset-scale);

    } @else {

      @include transform-translate3d(0, $tff-hint-offset-large, 0);
      @include transform-origin(left, center);
      @include transition( $tff-transition );

    }

    @if( $transition != false ) {
      @include transition($transition);
    }

  }
}

@mixin text-dashed-line( $dotGap, $dotSize, $color ) {
  @include dashed-border(1px, 1px, $dotGap, $color, bottom );
  background-size: $dotSize $dotGap;
}

@mixin dashed-border($dashlength, $spacelength, $borderwidth, $color, $position: top) {
  $per: percentage($dashlength / ($dashlength + $spacelength));
  background-image: linear-gradient(to right, $color 0%, $color $per, rgba(0, 0, 0, 0) 0%);
  background-position: 0 $position;

  background-size: ($dashlength + $spacelength) $borderwidth;
  background-repeat: repeat-x;
}


